#include <stdio.h>
#include "gc.h"

mem_chunk * root;

/* A wrapper around malloc to keep track of dynamically allocated memory
 */
void *gc_malloc(int nbytes){
	mem_chunk * r = root;
	mem_chunk * m = malloc(sizeof(struct mem_chunk));
	m->in_use = USED;
	m->address = &malloc(sizeof(nbytes));
	if(r = NULL){
		root = m;
	}
	else{
		if(r->next != NULL){
			r->next = r;
		}
			r->next = m;
	}
	return malloc(sizeof(nbytes));
}

/* Executes the garbage collector.
 * mark_obj will traverse the data structure rooted at obj, calling
 * mark_one for each dynamically allocated chunk of memory to mark
 * that it is still in use.
 */
void mark_and_sweep(void *obj, void (*mark_obj)(void *));

/* Mark vptr as still in use
 * Return code:
 *   0 on success
 *   1 if memory chunk pointed to by vptr was already marked as in use
 */
int mark_one(void *vptr);